---
source: crates/ruff_server/tests/notebook.rs
expression: snapshot.query().as_notebook()
---
Some(
    NotebookDocument {
        cells: [
            NotebookCell {
                url: Url {
                    scheme: "notebook-cell",
                    cannot_be_a_base: false,
                    username: "",
                    password: None,
                    host: None,
                    port: None,
                    path: "/Users/test/notebooks/super_resolution_overview.ipynb.ipynb",
                    query: Some(
                        "cell=0",
                    ),
                    fragment: None,
                },
                kind: Code,
                document: TextDocument {
                    contents: "# @title Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.",
                    index: [
                        0,
                        73,
                        140,
                        182,
                        184,
                        230,
                        232,
                        302,
                        370,
                        445,
                        515,
                    ],
                    version: 5,
                },
            },
            NotebookCell {
                url: Url {
                    scheme: "notebook-cell",
                    cannot_be_a_base: false,
                    username: "",
                    password: None,
                    host: None,
                    port: None,
                    path: "/Users/test/notebooks/super_resolution_overview.ipynb.ipynb",
                    query: Some(
                        "cell=1",
                    ),
                    fragment: None,
                },
                kind: Code,
                document: TextDocument {
                    contents: "!pip install matplotlib tensorflow tensorflow-hub",
                    index: [
                        0,
                    ],
                    version: 3,
                },
            },
            NotebookCell {
                url: Url {
                    scheme: "notebook-cell",
                    cannot_be_a_base: false,
                    username: "",
                    password: None,
                    host: None,
                    port: None,
                    path: "/Users/test/notebooks/super_resolution_overview.ipynb.ipynb",
                    query: Some(
                        "cell=2",
                    ),
                    fragment: None,
                },
                kind: Code,
                document: TextDocument {
                    contents: "import tensorflow as tf\nimport tensorflow_hub as hub\nimport matplotlib.pyplot as plt\n\nprint(tf.__version__)",
                    index: [
                        0,
                        24,
                        53,
                        85,
                        86,
                    ],
                    version: 2,
                },
            },
            NotebookCell {
                url: Url {
                    scheme: "notebook-cell",
                    cannot_be_a_base: false,
                    username: "",
                    password: None,
                    host: None,
                    port: None,
                    path: "/Users/test/notebooks/super_resolution_overview.ipynb.ipynb",
                    query: Some(
                        "cell=3",
                    ),
                    fragment: None,
                },
                kind: Code,
                document: TextDocument {
                    contents: "model = hub.load(\"https://tfhub.dev/captain-pool/esrgan-tf2/1\")\nconcrete_func = model.signatures[tf.saved_model.DEFAULT_SERVING_SIGNATURE_DEF_KEY]\n\n\n@tf.function(input_signature=[tf.TensorSpec(shape=[1, 50, 50, 3], dtype=tf.float32)])\ndef f(input):\n    return concrete_func(input)\n\n\nconverter = tf.lite.TFLiteConverter.from_concrete_functions(\n    [f.get_concrete_function()], model\n)\nconverter.optimizations = [tf.lite.Optimize.DEFAULT]\ntflite_model = converter.convert()\n\n# Save the TF Lite model.\nwith tf.io.gfile.GFile(\"ESRGAN.tflite\", \"wb\") as f:\n    f.write(tflite_model)\n\nesrgan_model_path = \"./ESRGAN.tflite\"",
                    index: [
                        0,
                        64,
                        147,
                        148,
                        149,
                        235,
                        249,
                        281,
                        282,
                        283,
                        344,
                        383,
                        385,
                        438,
                        473,
                        474,
                        500,
                        552,
                        578,
                        579,
                    ],
                    version: 4,
                },
            },
            NotebookCell {
                url: Url {
                    scheme: "notebook-cell",
                    cannot_be_a_base: false,
                    username: "",
                    password: None,
                    host: None,
                    port: None,
                    path: "/Users/test/notebooks/super_resolution_overview.ipynb.ipynb",
                    query: Some(
                        "cell=4",
                    ),
                    fragment: None,
                },
                kind: Code,
                document: TextDocument {
                    contents: "test_img_path = tf.keras.utils.get_file(\n    \"lr.jpg\",\n    \"https://raw.githubusercontent.com/tensorflow/examples/master/lite/examples/super_resolution/android/app/src/main/assets/lr-1.jpg\",\n)",
                    index: [
                        0,
                        41,
                        55,
                        191,
                    ],
                    version: 1,
                },
            },
            NotebookCell {
                url: Url {
                    scheme: "notebook-cell",
                    cannot_be_a_base: false,
                    username: "",
                    password: None,
                    host: None,
                    port: None,
                    path: "/Users/test/notebooks/super_resolution_overview.ipynb.ipynb",
                    query: Some(
                        "cell=5",
                    ),
                    fragment: None,
                },
                kind: Code,
                document: TextDocument {
                    contents: "lr = tf.io.read_file(test_img_path)\nlr = tf.image.decode_jpeg(lr)\nlr = tf.expand_dims(lr, axis=0)\nlr = tf.cast(lr, tf.float32)\n\n# Load TFLite model and allocate tensors.\ninterpreter = tf.lite.Interpreter(model_path=esrgan_model_path)\ninterpreter.allocate_tensors()\n\n# Get input and output tensors.\ninput_details = interpreter.get_input_details()\noutput_details = interpreter.get_output_details()\n\n# Run the model\ninterpreter.set_tensor(input_details[0][\"index\"], lr)\ninterpreter.invoke()\n\n# Extract the output and postprocess it\noutput_data = interpreter.get_tensor(output_details[0][\"index\"])\nsr = tf.squeeze(output_data, axis=0)\nsr = tf.clip_by_value(sr, 0, 255)\nsr = tf.round(sr)\nsr = tf.cast(sr, tf.uint8)",
                    index: [
                        0,
                        36,
                        66,
                        98,
                        127,
                        128,
                        170,
                        234,
                        265,
                        266,
                        298,
                        346,
                        396,
                        397,
                        413,
                        467,
                        488,
                        489,
                        529,
                        594,
                        631,
                        665,
                        683,
                    ],
                    version: 0,
                },
            },
            NotebookCell {
                url: Url {
                    scheme: "notebook-cell",
                    cannot_be_a_base: false,
                    username: "",
                    password: None,
                    host: None,
                    port: None,
                    path: "/Users/test/notebooks/super_resolution_overview.ipynb.ipynb",
                    query: Some(
                        "cell=6",
                    ),
                    fragment: None,
                },
                kind: Code,
                document: TextDocument {
                    contents: "lr = tf.cast(tf.squeeze(lr, axis=0), tf.uint8)\nplt.figure(figsize=(1, 1))\nplt.title(\"LR\")\nplt.imshow(lr.numpy())\nplt.figure(figsize=(10, 4))\nplt.subplot(1, 2, 1)\nplt.title(f\"ESRGAN (x4)\")\nplt.imshow(sr.numpy())\nbicubic = tf.image.resize(lr, [200, 200], tf.image.ResizeMethod.BICUBIC)\nbicubic = tf.cast(bicubic, tf.uint8)\nplt.subplot(1, 2, 2)\nplt.title(\"Bicubic\")\nplt.imshow(bicubic.numpy());",
                    index: [
                        0,
                        47,
                        74,
                        90,
                        113,
                        141,
                        162,
                        188,
                        211,
                        284,
                        321,
                        342,
                        363,
                    ],
                    version: 6,
                },
            },
        ],
        metadata: RawNotebookMetadata {
            authors: None,
            kernelspec: Some(
                Object {
                    "display_name": String("Python 3"),
                    "language": String("python"),
                    "name": String("python3"),
                },
            ),
            language_info: Some(
                LanguageInfo {
                    codemirror_mode: Some(
                        Object {
                            "name": String("ipython"),
                            "version": Number(3),
                        },
                    ),
                    file_extension: Some(
                        ".py",
                    ),
                    mimetype: Some(
                        "text/x-python",
                    ),
                    name: "python",
                    pygments_lexer: Some(
                        "ipython3",
                    ),
                    extra: {
                        "nbconvert_exporter": String("python"),
                        "version": String("3.7.4"),
                    },
                },
            ),
            orig_nbformat: None,
            title: None,
            extra: {
                "colab": Object {
                    "collapsed_sections": Array [],
                    "name": String("super_resolution.ipynb"),
                    "provenance": Array [],
                    "toc_visible": Bool(true),
                },
            },
        },
        version: 6,
        cell_index: {
            Url {
                scheme: "notebook-cell",
                cannot_be_a_base: false,
                username: "",
                password: None,
                host: None,
                port: None,
                path: "/Users/test/notebooks/super_resolution_overview.ipynb.ipynb",
                query: Some(
                    "cell=0",
                ),
                fragment: None,
            }: 0,
            Url {
                scheme: "notebook-cell",
                cannot_be_a_base: false,
                username: "",
                password: None,
                host: None,
                port: None,
                path: "/Users/test/notebooks/super_resolution_overview.ipynb.ipynb",
                query: Some(
                    "cell=6",
                ),
                fragment: None,
            }: 6,
            Url {
                scheme: "notebook-cell",
                cannot_be_a_base: false,
                username: "",
                password: None,
                host: None,
                port: None,
                path: "/Users/test/notebooks/super_resolution_overview.ipynb.ipynb",
                query: Some(
                    "cell=3",
                ),
                fragment: None,
            }: 3,
            Url {
                scheme: "notebook-cell",
                cannot_be_a_base: false,
                username: "",
                password: None,
                host: None,
                port: None,
                path: "/Users/test/notebooks/super_resolution_overview.ipynb.ipynb",
                query: Some(
                    "cell=4",
                ),
                fragment: None,
            }: 4,
            Url {
                scheme: "notebook-cell",
                cannot_be_a_base: false,
                username: "",
                password: None,
                host: None,
                port: None,
                path: "/Users/test/notebooks/super_resolution_overview.ipynb.ipynb",
                query: Some(
                    "cell=5",
                ),
                fragment: None,
            }: 5,
            Url {
                scheme: "notebook-cell",
                cannot_be_a_base: false,
                username: "",
                password: None,
                host: None,
                port: None,
                path: "/Users/test/notebooks/super_resolution_overview.ipynb.ipynb",
                query: Some(
                    "cell=1",
                ),
                fragment: None,
            }: 1,
            Url {
                scheme: "notebook-cell",
                cannot_be_a_base: false,
                username: "",
                password: None,
                host: None,
                port: None,
                path: "/Users/test/notebooks/super_resolution_overview.ipynb.ipynb",
                query: Some(
                    "cell=2",
                ),
                fragment: None,
            }: 2,
        },
    },
)
